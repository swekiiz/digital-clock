{"version":3,"sources":["pages/home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","React","useState","Date","time","setTime","useEffect","timer","setInterval","clearInterval","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","clock","timeFormat","className","style","right","top","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAcA,IA0BeA,EA1BF,WAAO,IAAD,EACOC,IAAMC,SAAS,IAAIC,MAD1B,mBACVC,EADU,KACJC,EADI,KAEjBJ,IAAMK,WAAU,WACd,IAAMC,EAAQC,aAAY,WACxBH,EAAQ,IAAIF,QACX,KACH,OAAO,WACLM,cAAcF,MAEf,IATc,MAZnB,SAAoBG,GAClB,IAAIC,EAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACfC,EAAUL,EAAKM,aACfC,EAAON,GAAS,GAAK,KAAO,KAKhC,OAFAE,EAAUA,EAAU,GAAK,IAAMA,EAAUA,EACzCE,EAAUA,EAAU,GAAK,IAAMA,EAAUA,EAClC,CAAEG,MAAM,GAAD,OAHdP,GADAA,GAAgB,KACQ,GAGV,YAAcE,EAAd,YAAyBE,GAAWE,KAAK,GAAD,OAAKA,IAanCE,CAAWf,GAA3Bc,EAVS,EAUTA,MAAOD,EAVE,EAUFA,KACf,OACE,qBAAKG,UAAU,2IAAf,SACE,sBAAKA,UAAU,WAAf,UACE,6BAAKF,IACL,sBACEE,UAAU,+CACVC,MAAO,CAAEC,MAAO,OAAQC,IAAK,SAF/B,SAIGN,UCtBIO,EARH,WACV,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a4b8774c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction timeFormat(date) {\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let seconds = date.getSeconds();\n  let ampm = hours >= 12 ? \"pm\" : \"am\";\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  return { clock: `${hours}:${minutes}:${seconds}`, ampm: `${ampm}` };\n}\n\nconst Home = () => {\n  const [time, setTime] = React.useState(new Date());\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  const { clock, ampm } = timeFormat(time);\n  return (\n    <div className=\"flex v-screen h-screen bg-black text-white text-center m-auto flex-col justify-center font-light tracking-widest text-big md:text-bigest\">\n      <div className=\"relative\">\n        <h1>{clock}</h1>\n        <span\n          className=\"absolute text-gray-100 text-8xl md:text-mini\"\n          style={{ right: \"40px\", top: \"-75px\" }}\n        >\n          {ampm}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./pages/home\";\n\nconst App = () => {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}